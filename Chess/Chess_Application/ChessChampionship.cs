using Chess_Application.ChessApp;
using Chess_Application.Entities;
using Microsoft.EntityFrameworkCore.Metadata.Internal;

namespace Chess_Application
{
	public partial class ChessChampionship : Form
	{
		private readonly ChessApplication _app = new();

		public ChessChampionship()
		{
			InitializeComponent();
			FillTabPageTags();
			SettingAutoGeneratedColumns();
		}

		private void SettingAutoGeneratedColumns()
		{
			Dgv_ParticipantsEditing.AutoGenerateColumns = false;
			Dgv_ParticipantTournaments.AutoGenerateColumns = false;
			Dgv_ParticipantCompetitions.AutoGenerateColumns = false;
			Dgv_VenuesEditing.AutoGenerateColumns = false;
			Dgv_VenueTournaments.AutoGenerateColumns = false;
			Dgv_TournamentsEditing.AutoGenerateColumns = false;
			Dgv_TournamentsParticipants.AutoGenerateColumns = false;
			Dgv_TournamentsCompetitions.AutoGenerateColumns = false;
			Dgv_CompetitionsEditing.AutoGenerateColumns = false;
		}

		private void FillTabPageTags()
		{
			TabPage_Participants.Tag = Page.Participants;
			TabPage_Competitions.Tag = Page.Competitions;
			TabPage_Tournaments.Tag = Page.Tournaments;
			TabPage_Venues.Tag = Page.Venues;

		}

		private void TabControl_Editing_Selected(object sender, TabControlEventArgs e)
		{
			Switches();
		}

		private void Switches()
		{
			TabPage tabPage = TabControl_Editing.SelectedTab as TabPage;

			if (tabPage is not null)
			{
				switch ((Page?)tabPage.Tag)
				{
					case Page.Participants:
						SwitchToParticipantsPage();
						break;
					case Page.Competitions:
						SwitchToCompetitions();
						break;
					case Page.Tournaments:
						SwitchToTournaments();
						break;
					case Page.Venues:
						SwitchToVenues();
						break;
				}
			}
		}

		private void SwitchToParticipantsPage()
		{
			Dgv_ParticipantsEditing.DataSource = _app.GetParticipants();
		}

		private void SwitchToCompetitions()
		{
			Dgv_CompetitionsEditing.DataSource = _app.GetCompetitions();


			ComboBox_CompetitionTournament.DataSource = _app.GetTournaments();
			ComboBox_CompetitionTournament.DisplayMember = "Name";
			if (ComboBox_CompetitionTournament.Items.Count > 0)
				ComboBox_CompetitionTournament.SelectedItem = ComboBox_CompetitionTournament.Items[0];


			ComboBox_CompetitionPlayer1.DataSource = (from p in _app.GetParticipants()
													  select new
													  {
														  p.Id,
														  FullName = $"{p.Name} {p.Surname}"
													  }).ToList();

			ComboBox_CompetitionPlayer1.DisplayMember = "FullName";
			ComboBox_CompetitionPlayer1.ValueMember = "Id";
			if (ComboBox_CompetitionPlayer1.Items.Count > 0)
				ComboBox_CompetitionPlayer1.SelectedItem = ComboBox_CompetitionPlayer1.Items[0];


			ComboBox_CompetitionPlayer2.DataSource = (from p in _app.GetParticipants()
													  select new
													  {
														  p.Id,
														  FullName = $"{p.Name} {p.Surname}"
													  }).ToList();

			ComboBox_CompetitionPlayer2.DisplayMember = "FullName";
			ComboBox_CompetitionPlayer2.ValueMember = "Id";
			if (ComboBox_CompetitionPlayer2.Items.Count > 0)
				ComboBox_CompetitionPlayer2.SelectedItem = ComboBox_CompetitionPlayer2.Items[0];


			ComboBox_CompetitionWinner.DataSource = (from p in _app.GetParticipants()
													 select new
													 {
														 p.Id,
														 FullName = $"{p.Name} {p.Surname}"
													 }).ToList();

			ComboBox_CompetitionWinner.DisplayMember = "FullName";
			ComboBox_CompetitionWinner.ValueMember = "Id";
			if (ComboBox_CompetitionWinner.Items.Count > 0)
				ComboBox_CompetitionWinner.SelectedItem = ComboBox_CompetitionWinner.Items[0];
		}

		private void SwitchToTournaments()
		{
			Dgv_TournamentsEditing.DataSource = _app.GetTournaments();


			ComboBox_TournamentVenue.DataSource = _app.GetVenues();
			ComboBox_TournamentVenue.DisplayMember = "Name";
			if (ComboBox_TournamentVenue.Items.Count > 0)
				ComboBox_TournamentVenue.SelectedItem = ComboBox_TournamentVenue.Items[0];


			ComboBox_TournamentChampion.DataSource = (from p in _app.GetParticipants()
													  select new
													  {
														  p.Id,
														  FullName = $"{p.Name} {p.Surname}"
													  }).ToList();


			ComboBox_TournamentChampion.DisplayMember = "FullName";
			ComboBox_TournamentChampion.ValueMember = "Id";
			if (ComboBox_TournamentChampion.Items.Count > 0)
				ComboBox_TournamentChampion.SelectedItem = ComboBox_TournamentChampion.Items[0];
		}

		private void SwitchToVenues()
		{
			Dgv_VenuesEditing.DataSource = _app.GetVenues();
		}

		private void ComboBox_CompetitionTournament_SelectionChangeCommitted(object sender, EventArgs e)
		{

		}

		private static bool CheckFields(List<string> fields)
		{
			foreach (var field in fields)
			{
				if (string.IsNullOrEmpty(field))
				{
					MessageBox.Show("All fields should be filled!");
					return false;
				}
			}

			return true;
		}

		private bool ValidationParticipant()
		{
			List<string> fields = new()
			{
				TextBox_ParticipantName.Text,
				TextBox_ParticipantSurname.Text,
				TextBox_ParticipantRating.Text
			};

			if (DTPicker_ParticipantBirthdate.Value >= DateTime.Now) return false;

			if (!CheckFields(fields)) return false;

			return true;
		}

		private async void Btn_AddParticipant_Click(object sender, EventArgs e)
		{
			if (!ValidationParticipant()) return;

			_app.AddParticipant(TextBox_ParticipantName.Text, TextBox_ParticipantSurname.Text, DTPicker_ParticipantBirthdate.Value, TextBox_ParticipantRating.Text);

			await _app.SaveAllChanges(Btn_AddParticipant);
			Switches();
		}

		private async void Btn_SaveChangesParticipant_Click(object sender, EventArgs e)
		{
			if (!ValidationParticipant()) return;

			if (Dgv_ParticipantsEditing.SelectedRows.Count is 0) return;

			Participant? participant = Dgv_ParticipantsEditing.SelectedRows[0].DataBoundItem as Participant;
			if (participant is null) return;

			participant.Name = TextBox_ParticipantName.Text;
			participant.Surname = TextBox_ParticipantSurname.Text;
			participant.DateOfBirth = DTPicker_ParticipantBirthdate.Value;
			participant.Rating = TextBox_ParticipantRating.Text;

			await _app.SaveAllChanges(Btn_SaveChangesParticipant);
			Switches();
		}

		private async void Btn_RemoveParticipant_Click(object sender, EventArgs e)
		{
			if (Dgv_ParticipantsEditing.SelectedRows.Count is 0) return;

			Participant? participant = Dgv_ParticipantsEditing.SelectedRows[0].DataBoundItem as Participant;
			if (participant is null) return;

			DialogResult result = MessageBox.Show("Видалити гравця?", "Підтвердити...", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
			if (result != DialogResult.Yes) return;

			_app.RemoveParticipant(participant);

			await _app.SaveAllChanges(Btn_RemoveParticipant);
			Switches();
		}

		private void Dgv_ParticipantsEditing_SelectionChanged(object sender, EventArgs e)
		{
			if (Dgv_ParticipantsEditing.SelectedRows.Count is 0) return;

			Participant? participant = Dgv_ParticipantsEditing.SelectedRows[0].DataBoundItem as Participant;
			if (participant is null) return;

			TextBox_ParticipantName.Text = participant.Name;
			TextBox_ParticipantSurname.Text = participant.Surname;
			DTPicker_ParticipantBirthdate.Value = participant.DateOfBirth;
			TextBox_ParticipantRating.Text = participant.Rating;

			Dgv_ParticipantCompetitions.DataSource = participant.Сompetitions;
			Dgv_ParticipantTournaments.DataSource = participant.Tournaments;
		}

		private bool ValidationVenue()
		{
			List<string> fields = new()
			{
				TextBox_VenueName.Text,
				TextBox_VenueCity.Text,
				TextBox_VenueCountry.Text
			};

			if (!CheckFields(fields)) return false;

			return true;
		}

		private async void Btn_AddVenue_Click(object sender, EventArgs e)
		{
			if (!ValidationVenue()) return;

			_app.AddVenue(TextBox_VenueName.Text, TextBox_VenueCountry.Text, TextBox_VenueCity.Text);

			await _app.SaveAllChanges(Btn_AddVenue);
			Switches();
		}

		private async void Btn_SaveChangesVenue_Click(object sender, EventArgs e)
		{
			if (!ValidationVenue()) return;

			if (Dgv_VenuesEditing.SelectedRows.Count is 0) return;

			Venue? venue = Dgv_VenuesEditing.SelectedRows[0].DataBoundItem as Venue;
			if (venue is null) return;

			venue.Name = TextBox_VenueName.Text;
			venue.Country = TextBox_VenueCountry.Text;
			venue.City = TextBox_VenueCity.Text;

			await _app.SaveAllChanges(Btn_SaveChangesVenue);
			Switches();
		}

		private async void Btn_RemoveVenue_Click(object sender, EventArgs e)
		{
			if (Dgv_VenuesEditing.SelectedRows.Count is 0) return;
			Venue? venue = Dgv_VenuesEditing.SelectedRows[0].DataBoundItem as Venue;
			if (venue is null) return;

			DialogResult result = MessageBox.Show("Видалити місце проведення?", "Підтвердити...", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
			if (result != DialogResult.Yes) return;

			_app.RemoveVenue(venue);

			await _app.SaveAllChanges(Btn_RemoveVenue);
			Switches();
		}

		private void Dgv_VenuesEditing_SelectionChanged(object sender, EventArgs e)
		{
			if (Dgv_VenuesEditing.SelectedRows.Count is 0) return;

			Venue? venue = Dgv_VenuesEditing.SelectedRows[0].DataBoundItem as Venue;
			if (venue is null) return;

			TextBox_VenueName.Text = venue.Name;
			TextBox_VenueCountry.Text = venue.Country;
			TextBox_VenueCity.Text = venue.City;

			Dgv_VenueTournaments.DataSource = venue.Tournaments;
		}

		private bool ValidationTournament()
		{
			List<string> fields = new()
			{
				TextBox_TournamentName.Text
			};

			if (!CheckFields(fields)) return false;

			return true;
		}

		private async void Btn_AddTournament_Click(object sender, EventArgs e)
		{
			if (!ValidationTournament()) return;

			Venue? venue = ComboBox_TournamentVenue.SelectedItem as Venue;
			if (venue is null) return;

			Participant? champion = null;
			if (ComboBox_TournamentChampion.Enabled)
			{
				int id = (int)ComboBox_TournamentChampion.SelectedItem;

				champion = _app.GetParticipant(id);

				if (champion is null) return;
			}


			DateTime? dateStart = null;
			if (DTPicker_TournamentStartDate.Enabled)
				dateStart = DTPicker_TournamentStartDate.Value;

			DateTime? dateEnd = null;
			if (DTPicker_TournamentEndDate.Enabled)
				dateEnd = DTPicker_TournamentEndDate.Value;

			_app.AddTournament(TextBox_TournamentName.Text, venue, champion, dateStart, dateEnd);

			await _app.SaveAllChanges(Btn_AddTournament);
			Switches();
		}

		private async void Btn_SaveChangesTournament_Click(object sender, EventArgs e)
		{
			if (!ValidationTournament()) return;

			Venue? venue = ComboBox_TournamentVenue.SelectedItem as Venue;
			if (venue is null) return;

			Participant? champion = null;
			if (ComboBox_TournamentChampion.Enabled)
			{
				int id = (int)ComboBox_TournamentChampion.SelectedItem;

				champion = _app.GetParticipant(id);

				if (champion is null) return;
			}

			DateTime? dateStart = null;
			if (DTPicker_TournamentStartDate.Enabled)
				dateStart = DTPicker_TournamentStartDate.Value;

			DateTime? dateEnd = null;
			if (DTPicker_TournamentEndDate.Enabled)
				dateEnd = DTPicker_TournamentEndDate.Value;

			if (Dgv_TournamentsEditing.SelectedRows.Count == 0) return;
			Tournament? tournament = Dgv_TournamentsEditing.SelectedRows[0].DataBoundItem as Tournament;
			if (tournament is null) return;

			tournament.Name = TextBox_TournamentName.Text;
			tournament.Venue = venue;
			tournament.Champion = champion;
			tournament.DateOfStart = dateStart;
			tournament.DateOfEnd = dateEnd;

			await _app.SaveAllChanges(Btn_SaveChangesTournament);
			Switches();
		}

		private async void Btn_RemoveTournament_Click(object sender, EventArgs e)
		{
			if (Dgv_TournamentsEditing.SelectedRows.Count == 0) return;

			Tournament? tournament = Dgv_TournamentsEditing.SelectedRows[0].DataBoundItem as Tournament;
			if (tournament is null) return;

			DialogResult result = MessageBox.Show("Видалити турнір?", "Підтвердити...", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
			if (result != DialogResult.Yes) return;

			_app.RemoveTournament(tournament);

			await _app.SaveAllChanges(Btn_RemoveTournament);
			Switches();
		}

		private void Dgv_TournamentsEditing_SelectionChanged(object sender, EventArgs e)
		{
			if (Dgv_TournamentsEditing.SelectedRows.Count == 0) return;

			Tournament? tournament = Dgv_TournamentsEditing.SelectedRows[0].DataBoundItem as Tournament;
			if (tournament is null) return;

			TextBox_TournamentName.Text = tournament.Name;
			ComboBox_TournamentVenue.SelectedItem = tournament.Venue;

			for (int i = 0; i < ComboBox_TournamentChampion.Items.Count; i++)
			{
				int id = (int)ComboBox_TournamentChampion.Items[i];
				if (tournament.Champion is not null)
				{
					if (tournament.Champion.Id == id)
					{
						ComboBox_TournamentChampion.SelectedItem = ComboBox_TournamentChampion.Items[i];
					}
				}
			}

			DateTime? dateStart = tournament.DateOfStart;
			if(dateStart is null) dateStart = DateTime.MinValue;
			DTPicker_TournamentStartDate.Value = (DateTime)dateStart;

			DateTime? dateEnd = tournament.DateOfEnd;
			if (dateEnd is null) dateEnd = DateTime.MinValue;
			DTPicker_TournamentEndDate.Value = (DateTime)dateEnd;

			Dgv_TournamentsParticipants.DataSource = tournament.Participants;
			Dgv_TournamentsCompetitions.DataSource = tournament.Сompetitions;
		}


























		private void CheckBox_TournamentDateEnd_CheckedChanged(object sender, EventArgs e)
		{
			if (CheckBox_TournamentDateEnd.Checked)
				DTPicker_TournamentEndDate.Enabled = true;
			else
				DTPicker_TournamentEndDate.Enabled = false;

		}

		private void CheckBox_TournamentDateStart_CheckedChanged(object sender, EventArgs e)
		{
			if (CheckBox_TournamentDateStart.Checked)
			{
				DTPicker_TournamentStartDate.Enabled = true;
				CheckBox_TournamentDateEnd.Enabled = true;
			}
			else
			{
				DTPicker_TournamentStartDate.Enabled = false;
				CheckBox_TournamentDateEnd.Enabled = false;
				DTPicker_TournamentEndDate.Enabled = false;
				CheckBox_TournamentDateEnd.Checked = false;
			}
		}

		private void CheckBox_TournamentChampion_CheckedChanged(object sender, EventArgs e)
		{
			if (CheckBox_TournamentChampion.Checked)
				ComboBox_TournamentChampion.Enabled = true;
			else
				ComboBox_TournamentChampion.Enabled = false;
		}

		private void CheckBox_CompetitionWinner_CheckedChanged(object sender, EventArgs e)
		{
			if (CheckBox_CompetitionWinner.Checked)
				ComboBox_CompetitionWinner.Enabled = true;
			else
				ComboBox_CompetitionWinner.Enabled = false;
		}

		private void CheckBox_CompetitionEnd_CheckedChanged(object sender, EventArgs e)
		{
			if (CheckBox_CompetitionEnd.Checked)
			{
				Nud_EndHour.Enabled = true;
				Nud_EndMinute.Enabled = true;
			}
			else
			{
				Nud_EndHour.Enabled = false;
				Nud_EndMinute.Enabled = false;
			}
		}

		private void CheckBox_CompetitionStart_CheckedChanged(object sender, EventArgs e)
		{
			if (CheckBox_CompetitionStart.Checked)
			{
				Nud_StartHour.Enabled = true;
				Nud_StartMinute.Enabled = true;
				CheckBox_CompetitionEnd.Enabled = true;
			}
			else
			{
				Nud_StartHour.Enabled = false;
				Nud_StartMinute.Enabled = false;
				Nud_EndHour.Enabled = false;
				Nud_EndMinute.Enabled = false;
				CheckBox_CompetitionEnd.Enabled = false;
				CheckBox_CompetitionEnd.Checked = false;
			}
		}
	}
}